var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Album.html",[0,0.015,1,1.694]],["body/classes/Album.html",[0,0.015,1,2.386,2,1.487,3,0.267,4,0.228,5,0.189,6,2.799,7,0.443,8,2.179,9,3.542,10,1.505,11,4.252,12,1.505,13,3.704,14,0.947,15,0.031,16,2.318,17,2.438,18,1.621,19,1.011,20,3.347,21,1.563,22,2.968,23,3.347,24,1.888,25,3.347,26,3.347,27,1.133,28,3.961,29,3.347,30,3.278,31,2.799,32,3.764,33,3.347,34,0.534,35,2.627,36,4.5,37,4.5,38,3.278,39,1.367,40,2.438,41,2.799,42,1.954,43,0.267,44,2.799,45,0.016,46,0.021,47,0.016]],["title/controllers/AlbumController.html",[48,1.306,49,2.071]],["body/controllers/AlbumController.html",[0,0.011,1,1.257,3,0.189,4,0.161,5,0.134,7,0.314,10,1.544,12,1.755,14,0.988,15,0.032,16,2.207,18,1.149,19,0.962,21,1.618,27,1.522,34,0.37,43,0.189,45,0.011,46,0.017,47,0.011,48,0.969,49,2.284,50,0.969,51,1.983,52,1.728,53,1.13,54,2.284,55,1.869,56,2.284,57,2.284,58,1.869,59,2.284,60,2.058,61,1.983,62,2.943,63,2.948,64,2.371,65,2.034,66,2.034,67,3.801,68,1.732,69,2.371,70,3.065,71,2.371,72,1.537,73,2.948,74,2.371,75,2.47,76,1.537,77,2.948,78,2.371,79,1.384,80,2.948,81,2.371,82,1.983,83,2.948,84,2.371,85,1.728,86,3.525,87,2.371,88,1.728,89,1.983,90,1.257,91,0.384,92,2.231,93,1.983,94,2.371,95,1.384,96,1.537,97,1.983,98,1.599,99,2.371,100,1.983,101,2.371,102,1.983,103,2.371,104,2.371,105,2.371,106,1.983,107,2.371,108,2.371,109,2.948,110,2.371,111,2.371,112,2.371]],["title/modules/AlbumModule.html",[113,1.11,114,1.865]],["body/modules/AlbumModule.html",[0,0.019,3,0.326,4,0.278,5,0.231,15,0.031,34,0.587,43,0.326,45,0.019,46,0.024,47,0.019,49,3.625,50,2.092,91,0.662,92,3.269,93,3.414,113,1.943,114,3.599,115,1.813,116,1.813,117,2.164,118,2.164,119,1.813,120,2.966,121,2.164,122,3.414,123,3.414,124,2.715,125,2.164,126,2.164,127,4.082,128,4.082]],["title/classes/AlbumPermissions.html",[0,0.015,9,1.865]],["body/classes/AlbumPermissions.html",[0,0.017,1,3.178,2,1.628,3,0.293,4,0.249,5,0.207,7,0.485,8,2.315,9,2.79,10,1.574,14,0.862,15,0.031,16,2.173,18,2.315,19,0.947,21,1.66,22,3.104,27,1.203,34,0.558,35,2.79,39,1.498,43,0.293,45,0.017,46,0.023,47,0.017,129,4.714,130,2.671,131,1.985,132,3.482,133,3.066,134,3.066,135,3.066,136,3.875,137,1.944,138,3.666,139,3.666,140,3.666]],["title/injectables/AlbumService.html",[92,1.694,141,0.518]],["body/injectables/AlbumService.html",[0,0.011,1,2.795,3,0.195,4,0.166,5,0.138,7,0.323,10,1.56,12,1.744,14,0.955,15,0.031,19,0.971,21,2.142,27,1.327,34,0.256,43,0.195,45,0.012,46,0.017,47,0.012,53,1.154,54,2.772,55,1.908,56,2.332,57,2.332,58,2.268,59,2.772,60,2.101,62,2.504,65,2.053,66,2.053,68,1.832,72,2.332,75,2.795,76,2.332,79,2.101,85,2.622,91,0.395,92,1.908,98,1.614,109,3.95,141,0.583,142,0.918,143,2.04,144,2.807,145,2.04,146,2.439,147,3.599,148,2.439,149,2.439,150,2.439,151,2.439,152,2.04,153,2.439,154,2.439,155,5.452,156,2.439,157,1.181,158,2.439,159,2.04,160,3.01,161,2.439,162,2.439]],["title/controllers/AppController.html",[48,1.306,163,2.071]],["body/controllers/AppController.html",[0,0.02,3,0.338,4,0.288,5,0.24,7,0.561,15,0.031,16,1.731,19,0.755,27,1.319,34,0.55,43,0.338,45,0.02,46,0.025,47,0.02,48,2.141,50,1.731,53,1.68,68,1.359,91,0.687,95,2.473,96,2.746,98,1.254,163,3.396,164,3.544,165,4.971,166,4.238,167,3.016,168,3.544,169,4.238]],["title/modules/AppModule.html",[113,1.11,170,2.071]],["body/modules/AppModule.html",[0,0.014,3,0.247,4,0.21,5,0.175,14,0.502,15,0.031,34,0.635,43,0.247,45,0.015,46,0.02,47,0.015,50,1.744,91,0.502,113,1.696,114,3.331,115,1.375,116,1.375,117,1.641,118,1.641,119,1.375,120,2.589,121,1.641,124,2.262,125,1.641,126,1.641,163,3.165,167,3.026,168,2.589,170,4.093,171,2.589,172,2.589,173,2.589,174,3.026,175,3.331,176,3.331,177,3.096,178,2.765,179,3.096,180,2.589,181,3.096,182,3.096,183,3.096,184,2.589,185,3.096,186,3.096,187,2.589,188,3.096,189,3.096,190,3.096,191,3.096,192,3.096,193,3.096,194,3.096,195,2.006,196,3.096,197,1.375,198,3.096,199,3.096,200,3.096,201,3.096,202,3.096,203,3.096,204,3.096,205,2.589]],["title/injectables/AppService.html",[141,0.518,167,1.694]],["body/injectables/AppService.html",[0,0.02,3,0.353,4,0.301,5,0.25,7,0.585,15,0.031,19,0.788,27,1.354,34,0.464,43,0.353,45,0.021,46,0.026,47,0.021,53,1.725,68,1.418,91,0.717,98,1.309,141,0.872,142,1.665,165,5.045,167,2.852,206,3.699,207,4.422,208,4.422,209,4.422]],["title/guards/AuthGuard.html",[210,2.328,211,1.865]],["body/guards/AuthGuard.html",[0,0.018,3,0.314,4,0.268,5,0.223,7,0.521,12,1.166,14,0.638,15,0.031,19,0.702,34,0.526,43,0.314,45,0.019,46,0.024,47,0.019,53,1.605,65,1.483,66,1.483,68,1.263,91,0.638,98,1.166,141,0.811,211,2.922,212,3.938,213,3.294,214,5.977,215,3.938,216,5.79,217,3.938,218,5.005,219,4.186,220,4.186,221,5.502,222,3.294,223,3.938,224,2.088,225,3.646,226,3.938]],["title/modules/AuthModule.html",[113,1.11,174,1.694]],["body/modules/AuthModule.html",[0,0.016,3,0.27,4,0.23,5,0.191,15,0.031,34,0.628,43,0.27,45,0.016,46,0.021,47,0.016,91,0.548,113,1.774,115,1.5,116,1.5,117,1.791,118,1.791,119,1.5,120,2.708,121,2.708,124,2.4,125,1.791,126,1.791,174,3.328,178,2.188,227,2.825,228,2.825,229,2.825,230,3.062,231,3.419,232,3.419,233,3.377,234,4.528,235,2.46,236,4.528,237,1.791,238,2.825,239,2.188,240,2.825,241,3.377,242,3.377,243,3.377,244,2.825,245,2.825,246,3.377,247,3.377,248,3.377]],["title/injectables/AuthService.html",[141,0.518,230,1.548]],["body/injectables/AuthService.html",[0,0.013,3,0.227,4,0.193,5,0.161,7,0.376,10,0.841,12,1.381,14,0.868,15,0.032,19,0.831,27,1.468,34,0.533,39,1.162,43,0.227,45,0.013,46,0.019,47,0.013,53,1.289,62,2.132,65,1.757,66,1.757,68,1.289,91,0.461,95,1.66,98,1.19,131,1.716,137,1.507,141,0.652,142,1.07,144,2.468,157,1.377,195,2.606,197,2.468,224,2.474,230,1.948,235,2.071,249,2.378,250,1.948,251,4.021,252,1.842,253,2.843,254,5.556,255,2.843,256,4.021,257,2.843,258,2.843,259,4.021,260,2.843,261,3.405,262,2.606,263,2.071,264,2.071,265,2.347,266,2.606,267,2.606,268,4.021,269,2.606,270,2.843,271,1.66,272,4.021,273,2.071,274,2.843,275,2.843,276,2.843,277,2.843,278,2.843,279,2.378,280,2.378,281,2.843,282,2.843,283,2.843]],["title/classes/CreateUserDto.html",[0,0.015,284,1.694]],["body/classes/CreateUserDto.html",[0,0.02,2,1.889,3,0.34,4,0.289,5,0.241,7,0.563,8,2.544,14,0.924,15,0.03,19,1.015,27,1.568,43,0.34,45,0.02,46,0.025,47,0.02,197,2.532,250,2.76,261,3.327,284,2.785,285,4.978,286,3.099,287,3.557,288,4.254,289,3.557]],["title/classes/Image.html",[0,0.015,24,1.11]],["body/classes/Image.html",[0,0.014,2,1.391,3,0.25,4,0.213,5,0.177,7,0.414,8,2.083,10,1.454,12,1.454,13,3.579,14,0.951,15,0.031,16,2.34,17,2.281,18,2.379,19,1.02,21,1.494,22,2.867,24,1.494,27,1.331,28,4.172,30,3.133,31,2.618,32,3.597,34,0.555,35,2.51,38,3.133,39,1.279,42,1.827,43,0.25,45,0.015,46,0.02,47,0.015,131,1.916,132,2.281,136,3.133,137,1.66,290,2.618,291,2.654,292,3.183,293,3.131,294,3.131,295,3.131,296,3.131,297,3.597,298,3.131,299,3.131,300,3.597,301,2.029,302,3.131,303,3.131,304,3.131]],["title/controllers/ImageController.html",[48,1.306,305,2.071]],["body/controllers/ImageController.html",[0,0.011,3,0.187,4,0.16,5,0.28,7,0.31,10,1.372,12,1.538,14,0.933,15,0.031,16,2.123,19,0.926,21,1.61,24,0.815,27,1.424,34,0.52,43,0.187,45,0.011,46,0.017,47,0.011,48,0.959,50,0.959,52,1.709,53,1.121,54,2.709,55,1.854,56,2.266,57,2.266,58,1.854,59,2.709,61,1.962,62,2.457,63,1.962,65,1.957,66,1.957,67,3.923,68,1.666,70,2.548,72,1.52,73,1.962,75,2.457,76,1.52,77,2.925,79,1.37,80,2.925,82,1.962,83,1.962,88,1.709,89,1.962,90,1.244,91,0.38,95,1.37,96,1.52,98,1.538,100,1.962,102,1.962,106,1.962,225,3.376,305,2.266,306,1.962,307,4.887,308,2.346,309,2.346,310,2.346,311,3.046,312,2.346,313,2.346,314,2.346,315,2.346,316,2.346,317,2.346,318,2.346,319,2.346,320,2.346,321,3.498,322,1.962,323,2.217,324,1.962,325,2.346,326,1.709,327,1.709,328,2.548,329,1.709,330,1.37,331,1.962,332,1.962,333,2.346,334,2.346,335,3.876,336,2.346,337,2.346,338,2.346,339,4.181,340,2.346,341,2.346,342,2.548,343,2.346,344,2.346]],["title/modules/ImageModule.html",[113,1.11,175,1.865]],["body/modules/ImageModule.html",[0,0.018,3,0.311,4,0.265,5,0.22,15,0.031,34,0.606,43,0.311,45,0.018,46,0.024,47,0.018,50,2.031,91,0.632,113,1.902,115,1.731,116,1.731,117,2.066,118,2.066,119,1.731,120,2.903,121,2.066,124,2.636,125,2.066,126,2.066,175,3.556,178,2.525,305,3.548,323,3.23,324,3.259,326,2.839,327,2.839,345,3.259,346,3.259,347,3.897,348,3.897,349,3.897,350,3.897,351,3.897,352,3.259]],["title/classes/ImagePermissions.html",[0,0.015,291,1.419]],["body/classes/ImagePermissions.html",[0,0.017,2,1.628,3,0.293,4,0.249,5,0.207,7,0.485,8,2.315,10,1.574,14,0.862,15,0.031,16,2.173,18,2.315,19,0.947,21,1.66,22,3.104,24,2.15,34,0.558,35,2.79,39,1.498,40,2.671,43,0.293,45,0.017,46,0.023,47,0.017,130,2.671,131,1.985,132,3.482,133,3.066,134,3.066,135,3.066,136,3.875,137,1.944,291,2.123,353,4.714,354,3.066,355,3.666]],["title/injectables/ImageService.html",[141,0.518,323,1.694]],["body/injectables/ImageService.html",[0,0.007,3,0.114,4,0.097,5,0.221,7,0.189,10,1.51,12,1.317,14,0.807,15,0.032,19,0.749,21,2.07,24,1.949,34,0.467,39,0.585,42,0.835,43,0.114,45,0.007,46,0.011,47,0.007,53,0.759,54,1.963,55,1.256,56,1.535,57,1.535,58,1.256,59,1.963,62,1.867,65,1.583,66,1.583,68,1.348,72,1.535,75,2.975,76,1.535,79,1.382,90,1.256,91,0.232,98,1.244,131,1.595,137,0.759,141,0.384,142,0.539,144,2.518,145,1.197,152,1.197,157,2.472,159,1.981,160,2.945,224,2.56,262,3.017,263,1.042,264,1.042,265,3.152,266,0.927,267,0.927,269,2.282,271,2.979,273,1.042,291,1.564,292,0.927,301,0.927,311,2.207,323,1.256,329,1.042,342,3.392,354,1.197,356,1.197,357,4.582,358,1.431,359,2.368,360,1.431,361,1.431,362,1.431,363,1.431,364,1.431,365,1.981,366,3.263,367,1.431,368,1.042,369,1.042,370,1.042,371,1.042,372,2.534,373,1.431,374,3.242,375,1.042,376,1.197,377,2.207,378,2.207,379,1.981,380,2.368,381,1.431,382,3.263,383,2.566,384,1.981,385,1.431,386,2.368,387,2.566,388,3.263,389,2.566,390,1.431,391,1.431,392,1.981,393,1.981,394,1.981,395,1.431,396,1.431,397,1.431,398,1.431,399,1.197,400,2.534,401,1.431,402,1.431,403,1.431,404,1.431,405,1.725,406,1.725,407,1.197,408,1.197,409,1.197,410,1.042,411,2.368,412,2.368,413,1.431,414,1.431,415,3.03,416,1.431,417,2.368,418,2.368,419,1.431,420,2.368,421,2.368,422,2.368,423,1.431,424,1.431,425,1.431,426,1.197]],["title/injectables/JwtAuthGuard.html",[141,0.518,330,1.865]],["body/injectables/JwtAuthGuard.html",[0,0.021,3,0.369,4,0.314,5,0.261,15,0.03,34,0.58,43,0.369,45,0.022,46,0.026,47,0.022,91,0.75,141,0.896,142,1.741,211,2.699,237,2.452,330,3.226,427,3.867,428,3.369,429,2.996,430,4.624]],["title/injectables/JwtStrategy.html",[141,0.518,231,1.865]],["body/injectables/JwtStrategy.html",[0,0.017,3,0.296,4,0.252,5,0.209,7,0.49,10,1.096,12,1.096,14,0.6,15,0.031,19,0.857,34,0.594,43,0.296,45,0.018,46,0.023,47,0.018,53,1.542,65,1.394,66,1.394,68,1.187,91,0.6,98,1.096,141,0.78,142,1.394,144,2.374,231,2.808,237,1.963,239,2.399,240,3.097,245,3.097,252,3.463,261,2.161,279,3.097,429,2.399,431,3.097,432,4.023,433,3.703,434,4.811,435,4.469,436,3.703,437,3.703,438,3.097,439,2.697,440,3.097,441,3.097,442,3.097,443,3.097,444,3.703,445,3.703,446,3.703,447,3.097,448,3.703,449,3.703,450,3.703]],["title/injectables/LocalAuthGuard.html",[141,0.518,451,2.071]],["body/injectables/LocalAuthGuard.html",[0,0.021,3,0.369,4,0.314,5,0.261,15,0.03,34,0.58,43,0.369,45,0.022,46,0.026,47,0.022,91,0.75,141,0.896,142,1.741,211,2.699,237,2.452,428,3.369,429,2.996,451,3.581,452,3.867,453,4.624]],["title/injectables/LocalStrategy.html",[141,0.518,232,1.865]],["body/injectables/LocalStrategy.html",[0,0.016,3,0.271,4,0.23,5,0.192,7,0.448,12,1.343,14,0.735,15,0.031,19,0.808,27,1.476,34,0.598,43,0.271,45,0.016,46,0.022,47,0.016,53,1.64,65,1.708,66,1.708,68,1.086,91,0.549,95,1.977,98,1.003,131,1.752,137,1.796,141,0.735,142,1.275,144,2.272,157,1.641,195,2.94,197,2.53,220,3.794,224,1.796,230,2.839,232,2.648,237,1.796,238,2.833,252,2.195,265,1.977,271,1.977,429,2.195,432,4.278,438,2.833,439,2.468,441,2.833,442,2.833,443,2.833,454,2.833,455,3.388,456,3.388,457,4.537,458,3.388,459,2.833,460,4.537,461,3.388,462,3.388,463,3.388]],["title/classes/UpdateUserDto.html",[0,0.015,464,1.694]],["body/classes/UpdateUserDto.html",[0,0.02,2,1.964,3,0.353,4,0.301,5,0.25,7,0.585,8,2.605,14,0.872,15,0.03,19,0.958,27,1.518,43,0.353,45,0.021,46,0.026,47,0.021,197,2.576,250,2.808,286,3.222,287,3.699,289,3.699,464,2.852,465,4.849]],["title/classes/User.html",[0,0.015,131,1.025]],["body/classes/User.html",[0,0.014,2,1.338,3,0.241,4,0.205,5,0.17,7,0.398,8,2.028,9,3.455,10,1.425,11,4.026,14,0.941,15,0.031,16,2.372,17,3.507,18,2.331,19,1.034,21,1.454,22,2.809,24,1.899,27,1.424,28,4.229,34,0.546,35,2.444,38,3.79,39,1.231,40,2.194,41,2.519,42,2.444,43,0.241,44,2.519,45,0.014,46,0.02,47,0.014,131,1.343,197,2.138,250,2.331,261,2.809,291,2.629,301,1.952,466,2.519,467,3.012,468,3.012,469,3.012,470,3.012,471,3.012,472,3.012,473,3.012,474,3.012,475,3.012]],["title/controllers/UserController.html",[48,1.306,476,2.071]],["body/controllers/UserController.html",[0,0.011,3,0.198,4,0.169,5,0.14,7,0.328,12,1.502,14,0.823,15,0.032,16,2.167,19,0.945,27,0.918,34,0.576,43,0.198,45,0.012,46,0.017,47,0.012,48,1.014,50,1.014,52,1.808,53,1.169,55,1.933,58,1.933,60,2.128,62,1.933,65,1.91,66,1.91,67,1.808,68,1.701,70,3.149,88,2.656,90,1.933,91,0.402,96,1.609,97,2.076,98,1.57,131,1.386,144,2.356,195,1.609,197,1.103,225,2.656,230,2.093,250,1.766,252,1.609,284,2.812,307,4.585,322,2.076,330,1.449,331,2.076,332,3.05,335,3.615,451,1.609,464,2.907,476,2.363,477,2.076,478,3.984,479,3.05,480,2.076,481,2.482,482,2.482,483,2.482,484,2.482,485,2.482,486,2.482,487,2.482,488,2.482,489,2.482,490,2.482,491,2.482,492,2.482,493,2.482,494,2.482,495,2.291,496,2.076,497,2.076,498,3.05,499,2.076,500,2.482,501,2.482,502,2.482,503,3.646,504,2.482,505,2.482,506,2.482,507,2.482,508,2.482,509,2.482,510,2.482,511,2.482,512,2.482,513,2.482,514,2.482,515,2.482,516,2.482]],["title/modules/UserModule.html",[113,1.11,176,1.865]],["body/modules/UserModule.html",[0,0.017,3,0.297,4,0.253,5,0.21,15,0.031,34,0.595,43,0.297,45,0.018,46,0.023,47,0.018,50,1.97,91,0.602,113,1.859,115,1.65,116,1.65,117,1.97,118,1.97,119,1.65,120,2.838,121,2.838,124,2.556,125,1.97,126,1.97,174,3.189,176,3.662,178,3.124,187,3.107,476,3.468,495,3.4,496,3.107,517,3.107,518,3.107,519,3.715,520,3.107,521,3.715,522,3.715]],["title/injectables/UserService.html",[141,0.518,495,1.694]],["body/injectables/UserService.html",[0,0.01,3,0.168,4,0.143,5,0.119,7,0.278,10,1.793,12,1.296,14,0.71,15,0.032,19,0.841,21,1.904,24,1.357,34,0.544,39,0.858,42,1.225,43,0.168,45,0.01,46,0.015,47,0.01,53,1.031,55,1.705,58,1.705,60,1.877,65,1.649,66,1.649,68,1.514,75,1.705,79,1.877,85,2.342,90,1.113,91,0.34,98,1.157,131,1.825,141,0.521,142,0.79,144,2.624,157,2.287,224,2.322,250,1.017,262,2.532,263,1.529,264,1.529,265,2.907,266,2.532,267,2.532,269,2.532,271,2.756,280,1.755,284,2.503,291,1.428,301,1.36,329,1.529,366,3.268,374,2.342,375,2.847,376,3.268,377,2.847,378,2.847,382,2.689,383,2.342,387,2.342,388,2.689,389,2.342,399,2.689,400,2.689,405,1.529,406,1.529,407,1.755,408,1.755,410,1.529,464,2.748,478,3.268,479,2.689,480,2.689,495,1.705,497,1.755,498,2.689,499,1.755,523,1.755,524,2.099,525,2.099,526,3.215,527,2.099,528,2.099,529,2.099,530,2.099,531,1.529,532,2.099,533,2.099,534,2.099,535,2.099,536,2.099,537,2.099,538,2.099,539,3.215,540,2.099,541,2.099]],["title/coverage.html",[542,3.177]],["body/coverage.html",[0,0.025,1,1.268,5,0.135,6,2,9,1.396,14,0.388,15,0.031,24,0.831,45,0.011,46,0.017,47,0.011,48,1.911,49,1.55,51,2,92,1.268,119,1.062,129,2,130,2.585,131,0.767,141,0.922,143,2,157,1.158,163,1.55,164,2,167,1.268,206,2,210,1.742,211,1.396,213,2,230,1.158,231,1.396,232,1.396,239,1.55,249,2,284,1.268,285,2,286,2.585,290,2,291,1.062,305,1.55,306,2,323,1.268,328,1.742,330,1.396,353,2,356,2,368,1.742,369,1.742,370,1.742,371,1.742,427,2,428,2.585,431,2,451,1.55,452,2,454,2,464,1.268,465,2,466,2,476,1.55,477,2,495,1.268,523,2,531,1.742,542,1.742,543,2.392,544,2.392,545,2.392,546,5.479,547,4.229,548,3.548,549,4.229,550,4.678,551,2,552,6.185,553,6.279,554,4.229,555,4.678,556,4.531,557,2,558,2,559,2,560,2.392,561,3.537,562,2,563,2,564,2,565,2,566,2,567,2,568,2,569,3.537,570,2,571,2,572,2,573,2,574,2.392,575,2.392]],["title/dependencies.html",[116,1.707,576,2.669]],["body/dependencies.html",[15,0.032,24,1.373,39,1.615,45,0.019,46,0.024,47,0.019,91,0.641,116,1.756,180,3.305,184,3.305,222,3.305,235,2.879,237,2.095,292,2.561,300,3.305,326,2.879,327,2.879,365,3.305,439,4.015,440,3.305,459,3.305,577,5.511,578,3.952,579,3.952,580,3.952,581,3.952,582,3.952,583,5.017,584,3.952,585,3.952,586,3.305,587,5.017,588,3.952,589,3.952,590,3.952,591,3.952,592,3.952,593,3.952,594,3.952,595,3.952,596,3.952,597,3.952,598,3.952]],["title/miscellaneous/functions.html",[599,1.729,600,3.214]],["body/miscellaneous/functions.html",[7,0.655,15,0.027,45,0.024,46,0.027,47,0.024,119,2.702,559,4.142,599,3.209,600,4.142,601,4.953]],["title/index.html",[7,0.353,602,2.669,603,2.669]],["body/index.html",[4,0.245,15,0.031,45,0.017,46,0.022,47,0.017,426,3.016,542,2.628,604,3.607,605,3.607,606,4.729,607,3.607,608,3.607,609,3.607,610,3.607,611,3.607,612,3.607,613,3.607,614,5.277,615,3.607,616,3.607,617,3.607,618,3.607,619,6.081,620,3.607,621,3.607,622,3.607,623,5.967,624,3.607,625,3.607,626,4.729,627,3.607,628,3.607,629,3.607,630,3.607,631,4.729,632,3.955,633,3.607,634,3.607,635,3.607,636,4.729,637,4.729,638,3.607,639,3.607,640,3.607,641,3.607,642,3.607,643,3.016,644,3.607,645,3.607,646,3.607,647,3.016,648,3.607,649,3.607,650,3.607,651,3.607,652,3.607,653,3.607,654,3.607,655,3.607,656,3.607,657,3.607,658,3.607,659,3.607,660,3.607]],["title/modules.html",[115,1.937]],["body/modules.html",[15,0.026,45,0.022,46,0.026,47,0.022,114,2.677,115,2.037,170,2.972,174,2.431,175,2.677,176,2.677,643,5.223,661,6.245,662,6.245,663,6.245]],["title/overview.html",[664,3.647]],["body/overview.html",[2,1.473,15,0.031,45,0.016,46,0.021,47,0.016,50,1.355,92,2.683,113,1.152,114,3.301,115,1.473,116,1.473,117,1.759,118,1.759,119,1.473,120,1.759,121,1.759,122,2.774,123,2.774,124,2.371,125,1.759,126,1.759,142,1.249,167,2.683,170,4.085,171,2.774,172,2.774,173,2.774,174,3.317,175,3.301,176,3.535,210,2.416,227,2.774,228,2.774,229,2.774,230,2.884,231,2.954,232,2.954,323,2.683,345,2.774,346,2.774,495,3.157,517,2.774,518,2.774,520,2.774,664,2.774,665,3.317,666,3.317,667,3.317,668,3.317,669,2.774]],["title/miscellaneous/variables.html",[599,1.729,670,3.214]],["body/miscellaneous/variables.html",[5,0.207,7,0.202,10,1.601,12,0.739,13,1.111,14,0.801,15,0.032,18,1.209,21,1.402,24,1.589,27,0.384,30,1.111,45,0.007,46,0.012,47,0.007,60,0.89,75,1.679,90,0.808,98,1.195,131,1.295,144,1.407,157,2.1,197,1.626,205,1.275,219,1.275,224,2.696,239,1.617,244,1.275,250,1.955,261,1.849,262,1.617,265,2.137,266,0.988,267,0.988,269,2.372,271,2.137,273,1.818,284,0.808,291,1.407,292,0.988,297,4.761,311,2.667,328,1.818,342,2.941,352,1.275,357,2.649,368,1.818,369,1.818,370,1.818,371,1.818,372,1.275,374,1.111,375,1.111,377,1.818,378,1.818,379,1.275,383,1.111,384,1.275,387,1.111,389,2.667,392,2.087,393,2.087,394,2.649,405,1.111,406,1.111,409,1.275,410,1.818,435,2.649,447,1.275,464,0.808,531,1.818,546,2.087,551,1.275,556,1.275,557,2.649,558,2.649,561,1.275,562,2.087,563,3.061,564,2.087,565,1.275,566,2.087,567,1.275,568,2.087,569,1.275,570,2.087,571,2.087,572,2.087,573,1.275,586,1.275,599,0.988,632,3.827,647,1.275,669,2.649,670,1.275,671,4.775,672,3.168,673,1.525,674,3.168,675,1.525,676,1.525,677,5.693,678,1.525,679,2.495,680,1.525,681,2.495,682,1.525,683,2.495,684,2.495,685,2.495,686,1.525,687,3.168,688,3.168,689,1.525,690,1.525,691,1.525,692,1.525,693,1.525,694,1.525,695,1.525,696,2.495,697,2.495,698,1.525,699,1.525,700,3.66,701,3.168,702,1.525,703,1.525,704,1.525,705,2.495,706,1.525,707,1.525,708,1.525,709,1.525,710,1.525,711,2.495,712,2.495,713,3.168,714,1.525,715,2.495,716,1.525,717,1.525,718,1.525,719,2.495,720,1.525,721,1.525,722,1.525,723,1.525,724,1.525,725,1.525,726,1.525,727,1.525,728,1.525,729,1.525,730,1.525,731,2.495,732,3.168,733,1.525,734,2.495,735,1.525,736,1.525,737,1.525,738,2.495,739,1.525,740,1.525,741,5.208,742,1.525,743,1.525,744,1.525]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"modules/ImageModule.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":546,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["0.2.32",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":549,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":550,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":548,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":547,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":669,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["10).tostring(10",{"_index":728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.29.1",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["30439",{"_index":694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":666,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":665,"title":{},"body":{"overview.html":{}}}],["50",{"_index":681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5432",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["6.6.6",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["60000000s",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{}}}],["7",{"_index":668,"title":{},"body":{"overview.html":{}}}],["7.1.5",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["7.6.17",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["8.6.0",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":667,"title":{},"body":{"overview.html":{}}}],["_req",{"_index":711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["acceptfile",{"_index":714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":155,"title":{},"body":{"injectables/AlbumService.html":{}}}],["add",{"_index":159,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ImageService.html":{}}}],["added",{"_index":417,"title":{},"body":{"injectables/ImageService.html":{}}}],["addpermission",{"_index":54,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{}}}],["addpermission(@body",{"_index":108,"title":{},"body":{"controllers/AlbumController.html":{}}}],["addpermission(body",{"_index":61,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ImageController.html":{}}}],["addpermission(undefined",{"_index":145,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ImageService.html":{}}}],["adds",{"_index":156,"title":{},"body":{"injectables/AlbumService.html":{}}}],["album",{"_index":1,"title":{"classes/Album.html":{}},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"coverage.html":{}}}],["album.albumpermissions",{"_index":139,"title":{},"body":{"classes/AlbumPermissions.html":{}}}],["album.controller",{"_index":128,"title":{},"body":{"modules/AlbumModule.html":{}}}],["album.service",{"_index":93,"title":{},"body":{"controllers/AlbumController.html":{},"modules/AlbumModule.html":{}}}],["album/album.module",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["album/entities/album.entity",{"_index":138,"title":{},"body":{"classes/AlbumPermissions.html":{}}}],["albumcontroller",{"_index":49,"title":{"controllers/AlbumController.html":{}},"body":{"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"coverage.html":{}}}],["albumid",{"_index":109,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{}}}],["albummodule",{"_index":114,"title":{"modules/AlbumModule.html":{}},"body":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["albumpermissions",{"_index":9,"title":{"classes/AlbumPermissions.html":{}},"body":{"classes/Album.html":{},"classes/AlbumPermissions.html":{},"classes/User.html":{},"coverage.html":{}}}],["albumpermissions.album",{"_index":44,"title":{},"body":{"classes/Album.html":{},"classes/User.html":{}}}],["albums",{"_index":158,"title":{},"body":{"injectables/AlbumService.html":{}}}],["albumservice",{"_index":92,"title":{"injectables/AlbumService.html":{}},"body":{"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"coverage.html":{},"overview.html":{}}}],["allowed",{"_index":718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":416,"title":{},"body":{"injectables/ImageService.html":{}}}],["amazing",{"_index":644,"title":{},"body":{"index.html":{}}}],["andwhere",{"_index":742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["andwhere('image.userid",{"_index":409,"title":{},"body":{"injectables/ImageService.html":{},"miscellaneous/variables.html":{}}}],["andwhere('imagepermissions.userid",{"_index":414,"title":{},"body":{"injectables/ImageService.html":{}}}],["andwhere('userid",{"_index":425,"title":{},"body":{"injectables/ImageService.html":{}}}],["app",{"_index":621,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":168,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":163,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":612,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":170,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":167,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array(4",{"_index":724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":144,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["auth.guard",{"_index":332,"title":{},"body":{"controllers/ImageController.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":428,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["auth/auth.service",{"_index":500,"title":{},"body":{"controllers/UserController.html":{}}}],["auth/guards/jwt",{"_index":331,"title":{},"body":{"controllers/ImageController.html":{},"controllers/UserController.html":{}}}],["auth/guards/local",{"_index":501,"title":{},"body":{"controllers/UserController.html":{}}}],["authguard",{"_index":211,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["authguard('jwt",{"_index":430,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":453,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":174,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":653,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":230,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":645,"title":{},"body":{"index.html":{}}}],["body",{"_index":67,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ImageController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":219,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":119,"title":{},"body":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ImageModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":663,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":661,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["building",{"_index":607,"title":{},"body":{"index.html":{}}}],["callback",{"_index":713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["can't",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["canactivate",{"_index":214,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":215,"title":{},"body":{"guards/AuthGuard.html":{}}}],["catch",{"_index":388,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{}}}],["change",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkcredentialfields",{"_index":531,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkcredentialfields(createuserdto",{"_index":532,"title":{},"body":{"injectables/UserService.html":{}}}],["checkcredentialfields(updateuserdto",{"_index":536,"title":{},"body":{"injectables/UserService.html":{}}}],["class",{"_index":0,"title":{"classes/Album.html":{},"classes/AlbumPermissions.html":{},"classes/CreateUserDto.html":{},"classes/Image.html":{},"classes/ImagePermissions.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"modules/ImageModule.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Album.html":{},"classes/AlbumPermissions.html":{},"classes/CreateUserDto.html":{},"classes/Image.html":{},"classes/ImagePermissions.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_albummodule",{"_index":122,"title":{},"body":{"modules/AlbumModule.html":{},"overview.html":{}}}],["cluster_albummodule_providers",{"_index":123,"title":{},"body":{"modules/AlbumModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_imagemodule",{"_index":345,"title":{},"body":{"modules/ImageModule.html":{},"overview.html":{}}}],["cluster_imagemodule_providers",{"_index":346,"title":{},"body":{"modules/ImageModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":517,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":518,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":519,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":520,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":28,"title":{},"body":{"classes/Album.html":{},"classes/Image.html":{},"classes/User.html":{}}}],["column({type",{"_index":31,"title":{},"body":{"classes/Album.html":{},"classes/Image.html":{}}}],["configmodule",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log(err",{"_index":397,"title":{},"body":{"injectables/ImageService.html":{}}}],["const",{"_index":224,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{}}}],["constructor(authservice",{"_index":455,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(jwtservice",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":95,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/ImageController.html":{},"injectables/LocalStrategy.html":{}}}],["context",{"_index":218,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":226,"title":{},"body":{"guards/AuthGuard.html":{}}}],["controller",{"_index":48,"title":{"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ImageController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ImageController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('album",{"_index":94,"title":{},"body":{"controllers/AlbumController.html":{}}}],["controller('image",{"_index":333,"title":{},"body":{"controllers/ImageController.html":{}}}],["controller('user",{"_index":502,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":50,"title":{},"body":{"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ImageController.html":{},"modules/ImageModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":542,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":55,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":97,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/UserController.html":{}}}],["create(@request",{"_index":336,"title":{},"body":{"controllers/ImageController.html":{}}}],["create(createuserdto",{"_index":480,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(name",{"_index":147,"title":{},"body":{"injectables/AlbumService.html":{}}}],["create(req",{"_index":310,"title":{},"body":{"controllers/ImageController.html":{}}}],["create(undefined",{"_index":69,"title":{},"body":{"controllers/AlbumController.html":{}}}],["create(userid",{"_index":359,"title":{},"body":{"injectables/ImageService.html":{}}}],["created",{"_index":390,"title":{},"body":{"injectables/ImageService.html":{}}}],["createquerybuilder",{"_index":383,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["createquerybuilder('image",{"_index":393,"title":{},"body":{"injectables/ImageService.html":{},"miscellaneous/variables.html":{}}}],["createquerybuilder('imagepermissions",{"_index":406,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["createquerybuilder('user",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["createuserdto",{"_index":284,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createuserdto.mail.includes",{"_index":533,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.mail.length",{"_index":534,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentials.username",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["database",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":30,"title":{},"body":{"classes/Album.html":{},"classes/Image.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":118,"title":{},"body":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ImageModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"classes/AlbumPermissions.html":{},"controllers/AppController.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"classes/ImagePermissions.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":297,"title":{},"body":{"classes/Image.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":19,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":90,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["delete(':id",{"_index":80,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ImageController.html":{}}}],["deleted",{"_index":400,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":116,"title":{"dependencies.html":{}},"body":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ImageModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":613,"title":{},"body":{"index.html":{}}}],["dest",{"_index":351,"title":{},"body":{"modules/ImageModule.html":{}}}],["destination",{"_index":697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development",{"_index":622,"title":{},"body":{"index.html":{}}}],["dimensions",{"_index":705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["diskstorage",{"_index":709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dist/**/*.entity",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":543,"title":{},"body":{"coverage.html":{}}}],["dto/create",{"_index":497,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/update",{"_index":499,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e.request",{"_index":712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":633,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":608,"title":{},"body":{"index.html":{}}}],["encoding",{"_index":691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/image.entity",{"_index":367,"title":{},"body":{"injectables/ImageService.html":{}}}],["entities/user.entity",{"_index":530,"title":{},"body":{"injectables/UserService.html":{}}}],["entity",{"_index":35,"title":{},"body":{"classes/Album.html":{},"classes/AlbumPermissions.html":{},"classes/Image.html":{},"classes/ImagePermissions.html":{},"classes/User.html":{}}}],["err",{"_index":396,"title":{},"body":{"injectables/ImageService.html":{}}}],["error",{"_index":389,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["execute",{"_index":387,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":216,"title":{},"body":{"guards/AuthGuard.html":{}}}],["expiresin",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":43,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"modules/ImageModule.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":121,"title":{},"body":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ImageModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":327,"title":{},"body":{"controllers/ImageController.html":{},"modules/ImageModule.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":311,"title":{},"body":{"controllers/ImageController.html":{},"injectables/ImageService.html":{},"miscellaneous/variables.html":{}}}],["extends",{"_index":429,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["extname(file.originalname",{"_index":722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":437,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":445,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":447,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["fieldname",{"_index":690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"modules/ImageModule.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["file.filename",{"_index":380,"title":{},"body":{"injectables/ImageService.html":{}}}],["file.originalname.match(/\\.(jpg|jpeg|png|gif|jpg",{"_index":716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file.originalname.split('.')[0",{"_index":720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fileextname",{"_index":721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filefilter",{"_index":710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fileinterceptor",{"_index":325,"title":{},"body":{"controllers/ImageController.html":{}}}],["filemocked",{"_index":562,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["filename",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fill(null",{"_index":725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findall",{"_index":478,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyuserid",{"_index":56,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{}}}],["findbyuserid(@param('userid",{"_index":100,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ImageController.html":{}}}],["findbyuserid(userid",{"_index":72,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{}}}],["findone",{"_index":57,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{}}}],["findone(@param('id",{"_index":102,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ImageController.html":{}}}],["findone(id",{"_index":76,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{}}}],["found",{"_index":377,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":606,"title":{},"body":{"index.html":{}}}],["from(image",{"_index":398,"title":{},"body":{"injectables/ImageService.html":{}}}],["from(imagepermissions",{"_index":423,"title":{},"body":{"injectables/ImageService.html":{}}}],["from(user",{"_index":541,"title":{},"body":{"injectables/UserService.html":{}}}],["fs",{"_index":365,"title":{},"body":{"injectables/ImageService.html":{},"dependencies.html":{}}}],["fs.unlinksync(`./uploads/${image.name",{"_index":395,"title":{},"body":{"injectables/ImageService.html":{}}}],["function",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":600,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":77,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ImageController.html":{}}}],["get('feed",{"_index":506,"title":{},"body":{"controllers/UserController.html":{}}}],["get('user/:userid",{"_index":73,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ImageController.html":{}}}],["getconnection",{"_index":366,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{}}}],["getfeed",{"_index":479,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getfeed(@request",{"_index":507,"title":{},"body":{"controllers/UserController.html":{}}}],["getfeed(id",{"_index":526,"title":{},"body":{"injectables/UserService.html":{}}}],["getfeed(req",{"_index":483,"title":{},"body":{"controllers/UserController.html":{}}}],["gethello",{"_index":165,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethostimage",{"_index":368,"title":{},"body":{"injectables/ImageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gethostimage(imageid",{"_index":412,"title":{},"body":{"injectables/ImageService.html":{}}}],["getimagepermissionsdetails",{"_index":369,"title":{},"body":{"injectables/ImageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getimagepermissionsdetails(id",{"_index":403,"title":{},"body":{"injectables/ImageService.html":{}}}],["getmany",{"_index":410,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["getmanymocked",{"_index":736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getmetadata",{"_index":370,"title":{},"body":{"injectables/ImageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getmetadata(file",{"_index":381,"title":{},"body":{"injectables/ImageService.html":{}}}],["getone",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["getonemocked",{"_index":737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getpermissiondata",{"_index":371,"title":{},"body":{"injectables/ImageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getpermissiondata(imageid",{"_index":418,"title":{},"body":{"injectables/ImageService.html":{}}}],["getrepository",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/UserService.html":{}}}],["getrepository(image",{"_index":392,"title":{},"body":{"injectables/ImageService.html":{},"miscellaneous/variables.html":{}}}],["getrepository(imagepermissions",{"_index":405,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["getrepository(user",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["getting",{"_index":602,"title":{"index.html":{}},"body":{}}],["grow",{"_index":640,"title":{},"body":{"index.html":{}}}],["guard",{"_index":210,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":212,"title":{},"body":{"guards/AuthGuard.html":{}}}],["hello",{"_index":208,"title":{},"body":{"injectables/AppService.html":{}}}],["helpers",{"_index":329,"title":{},"body":{"controllers/ImageController.html":{},"injectables/ImageService.html":{},"injectables/UserService.html":{}}}],["here",{"_index":650,"title":{},"body":{"index.html":{}}}],["host",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["hostid",{"_index":357,"title":{},"body":{"injectables/ImageService.html":{},"miscellaneous/variables.html":{}}}],["hostimage",{"_index":701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpexception",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["httpexception('image",{"_index":372,"title":{},"body":{"injectables/ImageService.html":{},"miscellaneous/variables.html":{}}}],["httpexception('login",{"_index":682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpexception('user",{"_index":376,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{}}}],["httpexception('your",{"_index":702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":657,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":374,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.forbidden",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.not_found",{"_index":378,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":10,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"injectables/AuthService.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":544,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":446,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":24,"title":{"classes/Image.html":{}},"body":{"classes/Album.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["image.controller",{"_index":348,"title":{},"body":{"modules/ImageModule.html":{}}}],["image.imagepermissions",{"_index":354,"title":{},"body":{"classes/ImagePermissions.html":{},"injectables/ImageService.html":{}}}],["image.name",{"_index":420,"title":{},"body":{"injectables/ImageService.html":{}}}],["image.service",{"_index":324,"title":{},"body":{"controllers/ImageController.html":{},"modules/ImageModule.html":{}}}],["image.user",{"_index":474,"title":{},"body":{"classes/User.html":{}}}],["image/entities/image.entity",{"_index":40,"title":{},"body":{"classes/Album.html":{},"classes/ImagePermissions.html":{},"classes/User.html":{}}}],["image/image.module",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["imagecontroller",{"_index":305,"title":{"controllers/ImageController.html":{}},"body":{"controllers/ImageController.html":{},"modules/ImageModule.html":{},"coverage.html":{}}}],["imageid",{"_index":342,"title":{},"body":{"controllers/ImageController.html":{},"injectables/ImageService.html":{},"miscellaneous/variables.html":{}}}],["imagemocked",{"_index":563,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["imagemodule",{"_index":175,"title":{"modules/ImageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ImageModule.html":{},"modules.html":{},"overview.html":{}}}],["imagepermissions",{"_index":291,"title":{"classes/ImagePermissions.html":{}},"body":{"classes/Image.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["imagepermissions.image",{"_index":304,"title":{},"body":{"classes/Image.html":{}}}],["imagepermissions.user",{"_index":475,"title":{},"body":{"classes/User.html":{}}}],["imagepermissions?.map",{"_index":535,"title":{},"body":{"injectables/UserService.html":{}}}],["images",{"_index":11,"title":{},"body":{"classes/Album.html":{},"classes/User.html":{}}}],["imageservice",{"_index":323,"title":{"injectables/ImageService.html":{}},"body":{"controllers/ImageController.html":{},"modules/ImageModule.html":{},"injectables/ImageService.html":{},"coverage.html":{},"overview.html":{}}}],["imagesmocked",{"_index":564,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["imageuploadconfig",{"_index":328,"title":{},"body":{"controllers/ImageController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":223,"title":{},"body":{"guards/AuthGuard.html":{}}}],["import",{"_index":34,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"modules/ImageModule.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ImageModule.html":{},"modules/UserModule.html":{}}}],["incorrect",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"modules/ImageModule.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":141,"title":{"injectables/AlbumService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{}},"body":{"injectables/AlbumService.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":142,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["innerjoin('imagepermissions.image",{"_index":703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insert",{"_index":384,"title":{},"body":{"injectables/ImageService.html":{},"miscellaneous/variables.html":{}}}],["installation",{"_index":618,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":620,"title":{},"body":{"index.html":{}}}],["into(image",{"_index":385,"title":{},"body":{"injectables/ImageService.html":{}}}],["into(imagepermissions",{"_index":419,"title":{},"body":{"injectables/ImageService.html":{}}}],["itself",{"_index":411,"title":{},"body":{"injectables/ImageService.html":{}}}],["jest.fn().mockresolvedvalue(getonemocked",{"_index":740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockreturnthis",{"_index":741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockreturnvalue",{"_index":738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockreturnvalue(getmanymocked",{"_index":739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":647,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["jointable",{"_index":37,"title":{},"body":{"classes/Album.html":{}}}],["jpeg",{"_index":693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.stringify",{"_index":707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt",{"_index":440,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":330,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/ImageController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":444,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":231,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":654,"title":{},"body":{"index.html":{}}}],["leftjoinandselect",{"_index":743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leftjoinandselect('image.imagepermissions",{"_index":401,"title":{},"body":{"injectables/ImageService.html":{}}}],["leftjoinandselect('image.user",{"_index":402,"title":{},"body":{"injectables/ImageService.html":{}}}],["leftjoinandselect('imagepermissions.image",{"_index":407,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{}}}],["leftjoinandselect('imagepermissions.user",{"_index":704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":117,"title":{},"body":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ImageModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":660,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":637,"title":{},"body":{"index.html":{}}}],["listusersmocked",{"_index":570,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["literal",{"_index":62,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"injectables/AuthService.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{},"controllers/UserController.html":{}}}],["local",{"_index":459,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":451,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"injectables/LocalAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["localhost",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["localstrategy",{"_index":232,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["login(@body",{"_index":511,"title":{},"body":{"controllers/UserController.html":{}}}],["login(credentials",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(user",{"_index":486,"title":{},"body":{"controllers/UserController.html":{}}}],["loginlength",{"_index":679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mail",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["mandatory",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["manytomany",{"_index":36,"title":{},"body":{"classes/Album.html":{}}}],["manytomany(undefined)@jointable",{"_index":25,"title":{},"body":{"classes/Album.html":{}}}],["manytoone",{"_index":136,"title":{},"body":{"classes/AlbumPermissions.html":{},"classes/Image.html":{},"classes/ImagePermissions.html":{}}}],["manytoone(undefined",{"_index":132,"title":{},"body":{"classes/AlbumPermissions.html":{},"classes/Image.html":{},"classes/ImagePermissions.html":{}}}],["map",{"_index":726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":46,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"modules/ImageModule.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["math.round(math.random",{"_index":727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":292,"title":{},"body":{"classes/Image.html":{},"injectables/ImageService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":53,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["mimetype",{"_index":692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":599,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":636,"title":{},"body":{"index.html":{}}}],["mode",{"_index":626,"title":{},"body":{"index.html":{}}}],["module",{"_index":113,"title":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ImageModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ImageModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":115,"title":{"modules.html":{}},"body":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ImageModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":300,"title":{},"body":{"classes/Image.html":{},"dependencies.html":{}}}],["moment().format",{"_index":302,"title":{},"body":{"classes/Image.html":{}}}],["more",{"_index":426,"title":{},"body":{"injectables/ImageService.html":{},"index.html":{}}}],["multermodule",{"_index":349,"title":{},"body":{"modules/ImageModule.html":{}}}],["multermodule.register",{"_index":350,"title":{},"body":{"modules/ImageModule.html":{}}}],["myśliwiec",{"_index":655,"title":{},"body":{"index.html":{}}}],["name",{"_index":12,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["name}${randomname}${fileextname",{"_index":729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["needs",{"_index":462,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["nest",{"_index":614,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":659,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":91,"title":{},"body":{"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ImageController.html":{},"modules/ImageModule.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":326,"title":{},"body":{"controllers/ImageController.html":{},"modules/ImageModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":157,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":605,"title":{},"body":{"index.html":{}}}],["npm",{"_index":619,"title":{},"body":{"index.html":{}}}],["null",{"_index":696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":21,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":221,"title":{},"body":{"guards/AuthGuard.html":{}}}],["onetomany",{"_index":38,"title":{},"body":{"classes/Album.html":{},"classes/Image.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":17,"title":{},"body":{"classes/Album.html":{},"classes/Image.html":{},"classes/User.html":{}}}],["open",{"_index":638,"title":{},"body":{"index.html":{}}}],["optional",{"_index":66,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["originalname",{"_index":689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":126,"title":{},"body":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ImageModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":664,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":576,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":89,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ImageController.html":{}}}],["parameters",{"_index":65,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["params",{"_index":461,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passport",{"_index":439,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":441,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":442,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":88,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ImageController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":86,"title":{},"body":{"controllers/AlbumController.html":{}}}],["path",{"_index":698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":449,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.mail",{"_index":450,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":160,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ImageService.html":{}}}],["permissions",{"_index":415,"title":{},"body":{"injectables/ImageService.html":{}}}],["permissions.entity",{"_index":42,"title":{},"body":{"classes/Album.html":{},"classes/Image.html":{},"injectables/ImageService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["permissions.entity.ts",{"_index":130,"title":{},"body":{"classes/AlbumPermissions.html":{},"classes/ImagePermissions.html":{},"coverage.html":{}}}],["permissions.entity.ts:11",{"_index":133,"title":{},"body":{"classes/AlbumPermissions.html":{},"classes/ImagePermissions.html":{}}}],["permissions.entity.ts:13",{"_index":135,"title":{},"body":{"classes/AlbumPermissions.html":{},"classes/ImagePermissions.html":{}}}],["permissions.entity.ts:9",{"_index":134,"title":{},"body":{"classes/AlbumPermissions.html":{},"classes/ImagePermissions.html":{}}}],["permissions/entities/album",{"_index":41,"title":{},"body":{"classes/Album.html":{},"classes/User.html":{}}}],["permissions/entities/image",{"_index":301,"title":{},"body":{"classes/Image.html":{},"injectables/ImageService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["permissionsmocked",{"_index":566,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["pg",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["picts_manager",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":648,"title":{},"body":{"index.html":{}}}],["port",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":70,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ImageController.html":{},"controllers/UserController.html":{}}}],["post('/login",{"_index":510,"title":{},"body":{"controllers/UserController.html":{}}}],["post('permission/add",{"_index":63,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ImageController.html":{}}}],["post('permission/delete",{"_index":83,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ImageController.html":{}}}],["postgres",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":52,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ImageController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":22,"title":{},"body":{"classes/Album.html":{},"classes/AlbumPermissions.html":{},"classes/Image.html":{},"classes/ImagePermissions.html":{},"classes/User.html":{}}}],["private",{"_index":503,"title":{},"body":{"controllers/UserController.html":{}}}],["process.env.database_password",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.database_user",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":628,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":604,"title":{},"body":{"index.html":{}}}],["project",{"_index":639,"title":{},"body":{"index.html":{}}}],["promise",{"_index":220,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["properties",{"_index":8,"title":{},"body":{"classes/Album.html":{},"classes/AlbumPermissions.html":{},"classes/CreateUserDto.html":{},"classes/Image.html":{},"classes/ImagePermissions.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["property",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["provided",{"_index":373,"title":{},"body":{"injectables/ImageService.html":{}}}],["providers",{"_index":120,"title":{},"body":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ImageModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["pwdlength",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["randomname",{"_index":723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["read",{"_index":649,"title":{},"body":{"index.html":{}}}],["readable",{"_index":421,"title":{},"body":{"injectables/ImageService.html":{}}}],["readonly",{"_index":96,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ImageController.html":{},"controllers/UserController.html":{}}}],["record",{"_index":435,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["reflect",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":58,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":106,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ImageController.html":{}}}],["remove(@request",{"_index":515,"title":{},"body":{"controllers/UserController.html":{}}}],["remove(id",{"_index":79,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{},"injectables/UserService.html":{}}}],["remove(req",{"_index":489,"title":{},"body":{"controllers/UserController.html":{}}}],["removepermission",{"_index":59,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{}}}],["removepermission(@body",{"_index":111,"title":{},"body":{"controllers/AlbumController.html":{}}}],["removepermission(body",{"_index":82,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ImageController.html":{}}}],["removepermission(undefined",{"_index":152,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ImageService.html":{}}}],["removes",{"_index":162,"title":{},"body":{"injectables/AlbumService.html":{}}}],["repository",{"_index":617,"title":{},"body":{"index.html":{}}}],["req",{"_index":307,"title":{},"body":{"controllers/ImageController.html":{},"controllers/UserController.html":{}}}],["req.user.id",{"_index":339,"title":{},"body":{"controllers/ImageController.html":{}}}],["request",{"_index":225,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/ImageController.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":125,"title":{},"body":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ImageModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["result",{"_index":45,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"modules/ImageModule.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":47,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"modules/ImageModule.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":98,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":68,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":623,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":222,"title":{},"body":{"guards/AuthGuard.html":{},"dependencies.html":{}}}],["scalable",{"_index":609,"title":{},"body":{"index.html":{}}}],["secret",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":448,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["server",{"_index":610,"title":{},"body":{"index.html":{}}}],["set",{"_index":744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["set(updateuserdto",{"_index":538,"title":{},"body":{"injectables/UserService.html":{}}}],["setfilefilter",{"_index":557,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["setfilename",{"_index":558,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["settypeormrepomocked",{"_index":568,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["side",{"_index":611,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["size",{"_index":586,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["sizeof(file.path",{"_index":706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"modules/ImageModule.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":642,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../helpers.ts",{"_index":671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../image.ts",{"_index":672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../imagepermissions.ts",{"_index":675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":601,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../typeorm.ts",{"_index":676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.ts",{"_index":674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/album/album.controller.ts",{"_index":51,"title":{},"body":{"controllers/AlbumController.html":{},"coverage.html":{}}}],["src/album/album.controller.ts:17",{"_index":71,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:22",{"_index":74,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:27",{"_index":78,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:32",{"_index":87,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:37",{"_index":81,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:42",{"_index":64,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:46",{"_index":84,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.module.ts",{"_index":127,"title":{},"body":{"modules/AlbumModule.html":{}}}],["src/album/album.service.ts",{"_index":143,"title":{},"body":{"injectables/AlbumService.html":{},"coverage.html":{}}}],["src/album/album.service.ts:13",{"_index":149,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:17",{"_index":146,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:27",{"_index":153,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:37",{"_index":154,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:41",{"_index":151,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:5",{"_index":148,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:9",{"_index":150,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/entities/album.entity.ts",{"_index":6,"title":{},"body":{"classes/Album.html":{},"coverage.html":{}}}],["src/album/entities/album.entity.ts:15",{"_index":23,"title":{},"body":{"classes/Album.html":{}}}],["src/album/entities/album.entity.ts:17",{"_index":29,"title":{},"body":{"classes/Album.html":{}}}],["src/album/entities/album.entity.ts:19",{"_index":33,"title":{},"body":{"classes/Album.html":{}}}],["src/album/entities/album.entity.ts:22",{"_index":26,"title":{},"body":{"classes/Album.html":{}}}],["src/album/entities/album.entity.ts:27",{"_index":20,"title":{},"body":{"classes/Album.html":{}}}],["src/app.controller.ts",{"_index":164,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":166,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":206,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":207,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.guard.ts",{"_index":213,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:6",{"_index":217,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:23",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:7",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:9",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":551,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/jwt",{"_index":427,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":452,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":431,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:16",{"_index":436,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:7",{"_index":433,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":454,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:14",{"_index":458,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:8",{"_index":456,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/image/entities/image.entity.ts",{"_index":290,"title":{},"body":{"classes/Image.html":{},"coverage.html":{}}}],["src/image/entities/image.entity.ts:16",{"_index":293,"title":{},"body":{"classes/Image.html":{}}}],["src/image/entities/image.entity.ts:18",{"_index":296,"title":{},"body":{"classes/Image.html":{}}}],["src/image/entities/image.entity.ts:20",{"_index":298,"title":{},"body":{"classes/Image.html":{}}}],["src/image/entities/image.entity.ts:22",{"_index":295,"title":{},"body":{"classes/Image.html":{}}}],["src/image/entities/image.entity.ts:24",{"_index":299,"title":{},"body":{"classes/Image.html":{}}}],["src/image/entities/image.entity.ts:29",{"_index":294,"title":{},"body":{"classes/Image.html":{}}}],["src/image/helpers.ts",{"_index":556,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/image/image.controller.ts",{"_index":306,"title":{},"body":{"controllers/ImageController.html":{},"coverage.html":{}}}],["src/image/image.controller.ts:25",{"_index":313,"title":{},"body":{"controllers/ImageController.html":{}}}],["src/image/image.controller.ts:31",{"_index":315,"title":{},"body":{"controllers/ImageController.html":{}}}],["src/image/image.controller.ts:36",{"_index":316,"title":{},"body":{"controllers/ImageController.html":{}}}],["src/image/image.controller.ts:41",{"_index":317,"title":{},"body":{"controllers/ImageController.html":{}}}],["src/image/image.controller.ts:47",{"_index":309,"title":{},"body":{"controllers/ImageController.html":{}}}],["src/image/image.controller.ts:55",{"_index":319,"title":{},"body":{"controllers/ImageController.html":{}}}],["src/image/image.module.ts",{"_index":347,"title":{},"body":{"modules/ImageModule.html":{}}}],["src/image/image.service.ts",{"_index":356,"title":{},"body":{"injectables/ImageService.html":{},"coverage.html":{}}}],["src/image/image.service.ts:110",{"_index":358,"title":{},"body":{"injectables/ImageService.html":{}}}],["src/image/image.service.ts:162",{"_index":364,"title":{},"body":{"injectables/ImageService.html":{}}}],["src/image/image.service.ts:17",{"_index":360,"title":{},"body":{"injectables/ImageService.html":{}}}],["src/image/image.service.ts:50",{"_index":363,"title":{},"body":{"injectables/ImageService.html":{}}}],["src/image/image.service.ts:82",{"_index":362,"title":{},"body":{"injectables/ImageService.html":{}}}],["src/image/image.service.ts:99",{"_index":361,"title":{},"body":{"injectables/ImageService.html":{}}}],["src/main.ts",{"_index":559,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/mocks/image.ts",{"_index":561,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/mocks/imagepermissions.ts",{"_index":565,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/mocks/typeorm.ts",{"_index":567,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/mocks/user.ts",{"_index":569,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/permissions/entities/album",{"_index":129,"title":{},"body":{"classes/AlbumPermissions.html":{},"coverage.html":{}}}],["src/permissions/entities/image",{"_index":353,"title":{},"body":{"classes/ImagePermissions.html":{},"coverage.html":{}}}],["src/user/dto/create",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":465,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts",{"_index":466,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:10",{"_index":471,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:12",{"_index":473,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:14",{"_index":472,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:16",{"_index":470,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:21",{"_index":469,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:26",{"_index":467,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:8",{"_index":468,"title":{},"body":{"classes/User.html":{}}}],["src/user/helpers.ts",{"_index":573,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/user.controller.ts",{"_index":477,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:26",{"_index":481,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:31",{"_index":482,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:37",{"_index":485,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:43",{"_index":488,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:49",{"_index":494,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:55",{"_index":491,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":521,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":523,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:10",{"_index":524,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:43",{"_index":525,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:50",{"_index":527,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:67",{"_index":529,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:94",{"_index":528,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":624,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":627,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":629,"title":{},"body":{"index.html":{}}}],["started",{"_index":603,"title":{"index.html":{}},"body":{}}],["starter",{"_index":616,"title":{},"body":{"index.html":{}}}],["statements",{"_index":545,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":651,"title":{},"body":{"index.html":{}}}],["storage",{"_index":708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategies/jwt.strategy",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":438,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":27,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":443,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":643,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":662,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":575,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":574,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":632,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["test.png",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test2",{"_index":732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test2@mail.fr",{"_index":735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":635,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":634,"title":{},"body":{"index.html":{}}}],["test@mail.fr",{"_index":734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tests",{"_index":631,"title":{},"body":{"index.html":{}}}],["testtest",{"_index":733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thanks",{"_index":641,"title":{},"body":{"index.html":{}}}],["this.albumservice.addpermission(body",{"_index":110,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.create(name",{"_index":99,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.findbyuserid(+userid",{"_index":101,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.findone(+id",{"_index":103,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.remove(+id",{"_index":107,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.removepermission(body",{"_index":112,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.update(+id",{"_index":105,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.appservice.gethello",{"_index":169,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(user",{"_index":512,"title":{},"body":{"controllers/UserController.html":{}}}],["this.authservice.validateuser(username",{"_index":463,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.imageservice.addpermission(body",{"_index":343,"title":{},"body":{"controllers/ImageController.html":{}}}],["this.imageservice.create(req.user.id",{"_index":337,"title":{},"body":{"controllers/ImageController.html":{}}}],["this.imageservice.findbyuserid(+userid",{"_index":338,"title":{},"body":{"controllers/ImageController.html":{}}}],["this.imageservice.findone(+id",{"_index":340,"title":{},"body":{"controllers/ImageController.html":{}}}],["this.imageservice.remove(+id",{"_index":341,"title":{},"body":{"controllers/ImageController.html":{}}}],["this.imageservice.removepermission(body",{"_index":344,"title":{},"body":{"controllers/ImageController.html":{}}}],["this.jwtservice.sign(payload",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.create(createuserdto",{"_index":504,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":505,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getfeed(req.user.id",{"_index":508,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(req.user.id",{"_index":516,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(req.user.id",{"_index":514,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["timestamp",{"_index":13,"title":{},"body":{"classes/Album.html":{},"classes/Image.html":{},"miscellaneous/variables.html":{}}}],["timestamptz",{"_index":32,"title":{},"body":{"classes/Album.html":{},"classes/Image.html":{}}}],["todo",{"_index":404,"title":{},"body":{"injectables/ImageService.html":{}}}],["touch",{"_index":652,"title":{},"body":{"index.html":{}}}],["true",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":382,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{}}}],["ts,.js",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter",{"_index":658,"title":{},"body":{"index.html":{}}}],["type",{"_index":14,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"classes/AlbumPermissions.html":{},"injectables/AlbumService.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/Image.html":{},"controllers/ImageController.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":39,"title":{},"body":{"classes/Album.html":{},"classes/AlbumPermissions.html":{},"injectables/AuthService.html":{},"classes/Image.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forroot",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":615,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":460,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":18,"title":{},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"classes/AlbumPermissions.html":{},"classes/Image.html":{},"classes/ImagePermissions.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":630,"title":{},"body":{"index.html":{}}}],["update",{"_index":60,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["update(@body",{"_index":513,"title":{},"body":{"controllers/UserController.html":{}}}],["update(@param('id",{"_index":104,"title":{},"body":{"controllers/AlbumController.html":{}}}],["update(id",{"_index":85,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"injectables/UserService.html":{}}}],["update(updateuserdto",{"_index":492,"title":{},"body":{"controllers/UserController.html":{}}}],["update(user",{"_index":537,"title":{},"body":{"injectables/UserService.html":{}}}],["updated",{"_index":539,"title":{},"body":{"injectables/UserService.html":{}}}],["updates",{"_index":161,"title":{},"body":{"injectables/AlbumService.html":{}}}],["updateuserdto",{"_index":464,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserdto.login",{"_index":540,"title":{},"body":{"injectables/UserService.html":{}}}],["uploaded",{"_index":391,"title":{},"body":{"injectables/ImageService.html":{}}}],["uploadedfile",{"_index":321,"title":{},"body":{"controllers/ImageController.html":{}}}],["uploads",{"_index":352,"title":{},"body":{"modules/ImageModule.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":322,"title":{},"body":{"controllers/ImageController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":335,"title":{},"body":{"controllers/ImageController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@delete",{"_index":490,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@get('feed",{"_index":484,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@get('user/:userid",{"_index":314,"title":{},"body":{"controllers/ImageController.html":{}}}],["useguards(jwtauthguard)@patch",{"_index":493,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@post('permission/add",{"_index":308,"title":{},"body":{"controllers/ImageController.html":{}}}],["useguards(jwtauthguard)@post('permission/delete",{"_index":318,"title":{},"body":{"controllers/ImageController.html":{}}}],["useguards(localauthguard",{"_index":509,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(localauthguard)@post('/login",{"_index":487,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors",{"_index":320,"title":{},"body":{"controllers/ImageController.html":{}}}],["useinterceptors(fileinterceptor('image",{"_index":334,"title":{},"body":{"controllers/ImageController.html":{}}}],["useinterceptors(undefined)@useguards(jwtauthguard)@post",{"_index":312,"title":{},"body":{"controllers/ImageController.html":{}}}],["user",{"_index":131,"title":{"classes/User.html":{}},"body":{"classes/AlbumPermissions.html":{},"injectables/AuthService.html":{},"classes/Image.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.albumpermissions",{"_index":140,"title":{},"body":{"classes/AlbumPermissions.html":{}}}],["user.controller",{"_index":522,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":498,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:2",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:3",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:4",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.imagepermissions",{"_index":355,"title":{},"body":{"classes/ImagePermissions.html":{}}}],["user.images",{"_index":303,"title":{},"body":{"classes/Image.html":{}}}],["user.login",{"_index":422,"title":{},"body":{"injectables/ImageService.html":{}}}],["user.mail",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":496,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/entities/user.entity",{"_index":137,"title":{},"body":{"classes/AlbumPermissions.html":{},"injectables/AuthService.html":{},"classes/Image.html":{},"classes/ImagePermissions.html":{},"injectables/ImageService.html":{},"injectables/LocalStrategy.html":{}}}],["user/user.module",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":476,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdto.login.length",{"_index":680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdto.password.length",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":75,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ImageController.html":{},"injectables/ImageService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["usermocked",{"_index":571,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["usermodule",{"_index":176,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":195,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{}}}],["userservice",{"_index":495,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersmocked",{"_index":572,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":432,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":434,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":457,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateuser",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(mail",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values",{"_index":379,"title":{},"body":{"injectables/ImageService.html":{},"miscellaneous/variables.html":{}}}],["values(values",{"_index":386,"title":{},"body":{"injectables/ImageService.html":{}}}],["variable",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":670,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":625,"title":{},"body":{"index.html":{}}}],["website",{"_index":656,"title":{},"body":{"index.html":{}}}],["where('id",{"_index":399,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{}}}],["where('image.id",{"_index":394,"title":{},"body":{"injectables/ImageService.html":{},"miscellaneous/variables.html":{}}}],["where('imageid",{"_index":424,"title":{},"body":{"injectables/ImageService.html":{}}}],["where('imagepermissions.imageid",{"_index":413,"title":{},"body":{"injectables/ImageService.html":{}}}],["where('imagepermissions.userid",{"_index":408,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{}}}],["where('user.id",{"_index":375,"title":{},"body":{"injectables/ImageService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["where('user.mail",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["world",{"_index":209,"title":{},"body":{"injectables/AppService.html":{}}}],["wrong",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["you'd",{"_index":646,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":124,"title":{},"body":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ImageModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["zxbpdgvjacbpcya0mg",{"_index":730,"title":{},"body":{"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Album.html":{"url":"classes/Album.html","title":"class - Album","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Album\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/entities/album.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                albumPermissions\n                            \n                            \n                                id\n                            \n                            \n                                images\n                            \n                            \n                                name\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            albumPermissions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     AlbumPermissions[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/album/entities/album.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/album/entities/album.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            images\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Image[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/album/entities/album.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/album/entities/album.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timestamp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'timestamptz'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/album/entities/album.entity.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  PrimaryGeneratedColumn,\n  Entity,\n  ManyToMany,\n  JoinTable,\n  OneToMany,\n} from 'typeorm';\n\nimport { Image } from '../../image/entities/image.entity';\nimport { AlbumPermissions } from '../../permissions/entities/album-permissions.entity';\n@Entity()\nexport class Album {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column()\n  name: string;\n  @Column({ type: 'timestamptz' })\n  timestamp: Date;\n  @ManyToMany(() => Image)\n  @JoinTable()\n  images: Image[];\n  @OneToMany(\n    () => AlbumPermissions,\n    (albumPermissions) => albumPermissions.album,\n  )\n  albumPermissions: AlbumPermissions[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AlbumController.html":{"url":"controllers/AlbumController.html","title":"controller - AlbumController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AlbumController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/album.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                album\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addPermission\n                            \n                            \n                                create\n                            \n                            \n                                findByUserId\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                removePermission\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addPermission\n                        \n                        \n                    \n                \n            \n            \n                \naddPermission(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('permission/add')\n                \n            \n\n            \n                \n                    Defined in src/album/album.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/album/album.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findByUserId\n                        \n                        \n                    \n                \n            \n            \n                \nfindByUserId(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')\n                \n            \n\n            \n                \n                    Defined in src/album/album.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/album/album.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/album/album.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removePermission\n                        \n                        \n                    \n                \n            \n            \n                \nremovePermission(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('permission/delete')\n                \n            \n\n            \n                \n                    Defined in src/album/album.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/album/album.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { AlbumService } from './album.service';\n\n@Controller('album')\nexport class AlbumController {\n  constructor(private readonly albumService: AlbumService) {}\n\n  @Post()\n  create(@Body() { name }: { name: string }) {\n    return this.albumService.create(name);\n  }\n\n  @Get('user/:userId')\n  findByUserId(@Param('userId') userId: string) {\n    return this.albumService.findByUserId(+userId);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.albumService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() { name }: { name: string }) {\n    return this.albumService.update(+id, name);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.albumService.remove(+id);\n  }\n\n  @Post('permission/add')\n  addPermission(@Body() body: { userId: number; albumId: number }) {\n    return this.albumService.addPermission(body);\n  }\n  @Post('permission/delete')\n  removePermission(@Body() body: { userId: number; albumId: number }) {\n    return this.albumService.removePermission(body);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AlbumModule.html":{"url":"modules/AlbumModule.html","title":"module - AlbumModule","body":"\n                   \n\n\n\n\n    Modules\n    AlbumModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AlbumModule\n\n\n\ncluster_AlbumModule_providers\n\n\n\n\nAlbumService\n\nAlbumService\n\n\n\nAlbumModule\n\nAlbumModule\n\nAlbumModule -->\n\nAlbumService->AlbumModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/album/album.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AlbumService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AlbumController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AlbumService } from './album.service';\nimport { AlbumController } from './album.controller';\n@Module({\n  controllers: [AlbumController],\n  providers: [AlbumService],\n})\nexport class AlbumModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AlbumPermissions.html":{"url":"classes/AlbumPermissions.html","title":"class - AlbumPermissions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AlbumPermissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permissions/entities/album-permissions.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                album\n                            \n                            \n                                id\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            album\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/permissions/entities/album-permissions.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/permissions/entities/album-permissions.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/permissions/entities/album-permissions.entity.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PrimaryGeneratedColumn, Entity, ManyToOne } from 'typeorm';\n\nimport { User } from '../../user/entities/user.entity';\nimport { Album } from '../../album/entities/album.entity';\n\n@Entity()\nexport class AlbumPermissions {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @ManyToOne(() => Album, (album) => album.albumPermissions)\n  album: string;\n  @ManyToOne(() => User, (user) => user.albumPermissions)\n  user: User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AlbumService.html":{"url":"injectables/AlbumService.html","title":"injectable - AlbumService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AlbumService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/album.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addPermission\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByUserId\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                removePermission\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addPermission\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPermission(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByUserId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUserId(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removePermission\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePermission(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AlbumService {\n  async create(name: string) {\n    return 'This action adds a new album';\n  }\n\n  async findOne(id: number) {\n    return `This action returns a #${id} album`;\n  }\n\n  async findByUserId(userId: number) {\n    return `This action returns albums by userID`;\n  }\n\n  async addPermission({\n    userId,\n    albumId,\n  }: {\n    userId: number;\n    albumId: number;\n  }) {\n    return `This action add permission album`;\n  }\n\n  async removePermission({\n    userId,\n    albumId,\n  }: {\n    userId: number;\n    albumId: number;\n  }) {\n    return `This action remove permission album`;\n  }\n\n  async update(id: number, name: string) {\n    return `This action updates a #${id} album`;\n  }\n\n  async remove(id: number) {\n    return `This action removes a #${id} album`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAlbumModule\n\nAlbumModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAlbumModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nImageModule\n\nImageModule\n\nAppModule -->\n\nImageModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AlbumModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            ImageModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { ImageModule } from './image/image.module';\nimport { AlbumModule } from './album/album.module';\nimport { AuthModule } from './auth/auth.module';\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: 'localhost',\n      port: 5432,\n      username: process.env.DATABASE_USER,\n      password: process.env.DATABASE_PASSWORD,\n      database: 'picts_manager',\n      entities: ['dist/**/*.entity{ .ts,.js}'],\n      synchronize: true,\n    }),\n    UserModule,\n    ImageModule,\n    AlbumModule,\n    AuthModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/auth.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const request = context.switchToHttp().getRequest();\n    return request;\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\n\nimport { AuthService } from './auth.service';\nimport { jwtConstants } from './constants';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\n\n@Module({\n  imports: [\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60000000s' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService, JwtModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(credentials: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    credentials\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(mail: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { User } from '../user/entities/user.entity';\nimport { getRepository } from 'typeorm';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n  constructor(private jwtService: JwtService) {}\n  async validateUser(mail: string, password: string) {\n    const user = await getRepository(User)\n      .createQueryBuilder('user')\n      .where('user.mail = :mail', { mail })\n      .getOne();\n\n    if (!user || user.password !== password)\n      throw new HttpException(\n        'Wrong password or wrong mail',\n        HttpStatus.FORBIDDEN,\n      );\n    return user;\n  }\n\n  async login(credentials: { username: string; password: string }) {\n    const user = await getRepository(User)\n      .createQueryBuilder('user')\n      .where('user.mail = :mail', { mail: credentials.username }) //can't change to mail, username property is mandatory\n      .getOne();\n\n    const payload = { id: user.id, mail: user.mail };\n    return {\n      accessToken: this.jwtService.sign(payload),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                mail\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/create-user.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mail\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/create-user.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/create-user.dto.ts:3\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n  login: string;\n  password: string;\n  mail: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Image.html":{"url":"classes/Image.html","title":"class - Image","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Image\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/image/entities/image.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                imagePermissions\n                            \n                            \n                                metadata\n                            \n                            \n                                name\n                            \n                            \n                                timestamp\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/image/entities/image.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imagePermissions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ImagePermissions[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/image/entities/image.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            metadata\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/image/entities/image.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/image/entities/image.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timestamp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'timestamptz', default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/image/entities/image.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/image/entities/image.entity.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import * as moment from 'moment';\n\nimport {\n  Column,\n  PrimaryGeneratedColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\n\nimport { User } from '../../user/entities/user.entity';\nimport { ImagePermissions } from '../../permissions/entities/image-permissions.entity';\n@Entity()\nexport class Image {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column()\n  name: string;\n  @Column({ type: 'timestamptz', default: moment().format() })\n  timestamp: Date;\n  @Column()\n  metadata: string;\n  @ManyToOne(() => User, (user) => user.images)\n  user: User;\n  @OneToMany(\n    () => ImagePermissions,\n    (imagePermissions) => imagePermissions.image,\n  )\n  imagePermissions: ImagePermissions[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ImageController.html":{"url":"controllers/ImageController.html","title":"controller - ImageController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ImageController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/image/image.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                image\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addPermission\n                            \n                            \n                                create\n                            \n                            \n                                findByUserId\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                removePermission\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addPermission\n                        \n                        \n                    \n                \n            \n            \n                \naddPermission(body: literal type, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('permission/add')\n                \n            \n\n            \n                \n                    Defined in src/image/image.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(req, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/image/image.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findByUserId\n                        \n                        \n                    \n                \n            \n            \n                \nfindByUserId(userId: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('user/:userId')\n                \n            \n\n            \n                \n                    Defined in src/image/image.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/image/image.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/image/image.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removePermission\n                        \n                        \n                    \n                \n            \n            \n                \nremovePermission(body: literal type, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('permission/delete')\n                \n            \n\n            \n                \n                    Defined in src/image/image.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  UploadedFile,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { ImageService } from './image.service';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { imageUploadConfig } from './helpers';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\n@Controller('image')\nexport class ImageController {\n  constructor(private readonly imageService: ImageService) {}\n\n  @UseInterceptors(FileInterceptor('image', imageUploadConfig))\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  create(@Request() req, @UploadedFile() file: Express.Multer.File) {\n    return this.imageService.create(req.user.id, file);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('user/:userId')\n  findByUserId(@Param('userId') userId: string, @Request() req) {\n    return this.imageService.findByUserId(+userId, req.user.id);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.imageService.findOne(+id);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.imageService.remove(+id);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('permission/add')\n  addPermission(\n    @Body() body: { imageId: number; userId: number },\n    @Request() req,\n  ) {\n    return this.imageService.addPermission(body, req.user.id);\n  }\n  @UseGuards(JwtAuthGuard)\n  @Post('permission/delete')\n  removePermission(\n    @Body() body: { imageId: number; userId: number },\n    @Request() req,\n  ) {\n    return this.imageService.removePermission(body, req.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImageModule.html":{"url":"modules/ImageModule.html","title":"module - ImageModule","body":"\n                   \n\n\n\n\n    Modules\n    ImageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ImageModule\n\n\n\ncluster_ImageModule_providers\n\n\n\n\nImageService\n\nImageService\n\n\n\nImageModule\n\nImageModule\n\nImageModule -->\n\nImageService->ImageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/image/image.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ImageService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ImageController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ImageService } from './image.service';\nimport { ImageController } from './image.controller';\nimport { MulterModule } from '@nestjs/platform-express';\n\n@Module({\n  imports: [\n    MulterModule.register({\n      dest: './uploads',\n    }),\n  ],\n  controllers: [ImageController],\n  providers: [ImageService],\n})\nexport class ImageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImagePermissions.html":{"url":"classes/ImagePermissions.html","title":"class - ImagePermissions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImagePermissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permissions/entities/image-permissions.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                image\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/permissions/entities/image-permissions.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            image\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Image\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/permissions/entities/image-permissions.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/permissions/entities/image-permissions.entity.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PrimaryGeneratedColumn, Entity, ManyToOne } from 'typeorm';\n\nimport { User } from '../../user/entities/user.entity';\nimport { Image } from '../../image/entities/image.entity';\n\n@Entity()\nexport class ImagePermissions {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @ManyToOne(() => Image, (image) => image.imagePermissions)\n  image: Image;\n  @ManyToOne(() => User, (user) => user.imagePermissions)\n  user: User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ImageService.html":{"url":"injectables/ImageService.html","title":"injectable - ImageService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ImageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/image/image.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addPermission\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByUserId\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                removePermission\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addPermission\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPermission(undefined: literal type, hostId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/image/image.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hostId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: number, file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/image/image.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByUserId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUserId(userId: number, hostId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/image/image.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hostId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/image/image.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/image/image.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removePermission\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePermission(undefined: literal type, hostId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/image/image.service.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hostId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as fs from 'fs';\nimport { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { User } from '../user/entities/user.entity';\n\nimport { getConnection, getRepository } from 'typeorm';\nimport { Image } from './entities/image.entity';\nimport {\n  getHostImage,\n  getImagePermissionsDetails,\n  getMetadata,\n  getPermissionData,\n} from './helpers';\nimport { ImagePermissions } from '../permissions/entities/image-permissions.entity';\n\n@Injectable()\nexport class ImageService {\n  async create(userId: number, file: Express.Multer.File) {\n    if (!file)\n      throw new HttpException('Image not provided', HttpStatus.BAD_REQUEST);\n\n    const user = await getRepository(User)\n      .createQueryBuilder('user')\n      .where('user.id = :id', { id: userId })\n      .getOne();\n\n    if (!user) throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n\n    const values = {\n      user,\n      name: file.filename,\n      metadata: getMetadata(file),\n    };\n\n    try {\n      await getConnection()\n        .createQueryBuilder()\n        .insert()\n        .into(Image)\n        .values(values)\n        .execute();\n    } catch (error) {\n      throw new HttpException(\n        'Image has not been created',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return `${file.filename} has been uploaded`;\n  }\n\n  async remove(id: number) {\n    const image = await getRepository(Image)\n      .createQueryBuilder('image')\n      .where('image.id = :id', { id })\n      .getOne();\n\n    if (!image)\n      throw new HttpException('Image not found', HttpStatus.NOT_FOUND);\n\n    try {\n      fs.unlinkSync(`./uploads/${image.name}`);\n    } catch (err) {\n      console.log(err);\n    }\n\n    try {\n      await getConnection()\n        .createQueryBuilder()\n        .delete()\n        .from(Image)\n        .where('id = :id', { id })\n        .execute();\n    } catch (error) {\n      throw new HttpException(\n        'Image has not been deleted',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    return `Image ${id} has been deleted`;\n  }\n\n  async findOne(id: number) {\n    const image = await getRepository(Image)\n      .createQueryBuilder('image')\n      .leftJoinAndSelect('image.imagePermissions', 'imagePermissions')\n      .leftJoinAndSelect('image.user', 'user')\n      .where('image.id = :id', { id })\n      .getOne();\n\n    if (!image)\n      throw new HttpException('Image not found', HttpStatus.NOT_FOUND);\n\n    image.imagePermissions = await getImagePermissionsDetails(id);\n\n    return image;\n  }\n\n  //TODO\n  async findByUserId(userId: number, hostId: number) {\n    const imagePermissions = await getRepository(ImagePermissions)\n      .createQueryBuilder('imagePermissions')\n      .leftJoinAndSelect('imagePermissions.image', 'image')\n      .where('imagePermissions.userId = :hostId', { hostId })\n      .andWhere('image.userId = :userId', { userId })\n      .getMany();\n\n    return imagePermissions;\n  }\n\n  async addPermission(\n    {\n      userId,\n      imageId,\n    }: {\n      userId: number;\n      imageId: number;\n    },\n    hostId: number,\n  ) {\n    if (hostId == userId)\n      throw new HttpException(\n        'Can not add permission for itself',\n        HttpStatus.BAD_REQUEST,\n      );\n\n    await getHostImage(imageId, hostId);\n\n    const permission = await getRepository(ImagePermissions)\n      .createQueryBuilder('imagePermissions')\n      .where('imagePermissions.imageId = :imageId', { imageId })\n      .andWhere('imagePermissions.userId = :userId', { userId })\n      .getOne();\n\n    if (permission)\n      throw new HttpException(\n        'Permissions already added',\n        HttpStatus.FORBIDDEN,\n      );\n    const { image, user } = await getPermissionData(imageId, userId);\n\n    const values = {\n      user,\n      image,\n    };\n\n    try {\n      await getConnection()\n        .createQueryBuilder()\n        .insert()\n        .into(ImagePermissions)\n        .values(values)\n        .execute();\n    } catch (error) {\n      throw new HttpException(\n        'Image permissions has not been added',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return `image \"${image.name}\" is readable for user : ${user.login}`;\n  }\n\n  async removePermission(\n    {\n      userId,\n      imageId,\n    }: {\n      userId: number;\n      imageId: number;\n    },\n    hostId: number,\n  ) {\n    if (hostId == userId)\n      throw new HttpException(\n        'Can not add permission for itself',\n        HttpStatus.BAD_REQUEST,\n      );\n\n    await getHostImage(imageId, hostId);\n\n    const { image, user } = await getPermissionData(imageId, userId);\n    try {\n      await getConnection()\n        .createQueryBuilder()\n        .delete()\n        .from(ImagePermissions)\n        .where('imageId = :imageId', { imageId })\n        .andWhere('userId = :userId', { userId })\n        .execute();\n    } catch (error) {\n      throw new HttpException(\n        'Image permissions has not been deleted',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    return `image \"${image.name}\" is no more readable for user : ${user.login}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from '../constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: Record) {\n    return { id: payload.id, mail: payload.mail };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { User } from '../../user/entities/user.entity';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  //validate methods params needs to be username and password\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/update-user.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/update-user.dto.ts:3\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UpdateUserDto {\n  login: string;\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                albumPermissions\n                            \n                            \n                                id\n                            \n                            \n                                imagePermissions\n                            \n                            \n                                images\n                            \n                            \n                                login\n                            \n                            \n                                mail\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            albumPermissions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     AlbumPermissions[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imagePermissions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ImagePermissions[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            images\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Image[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mail\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AlbumPermissions } from '../../permissions/entities/album-permissions.entity';\nimport { ImagePermissions } from '../../permissions/entities/image-permissions.entity';\nimport { Column, PrimaryGeneratedColumn, Entity, OneToMany } from 'typeorm';\nimport { Image } from '../../image/entities/image.entity';\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column()\n  login: string;\n  @Column()\n  password: string;\n  @Column()\n  mail: string;\n  @OneToMany(() => Image, (image) => image.user)\n  images: Image[];\n  @OneToMany(\n    () => ImagePermissions,\n    (imagePermissions) => imagePermissions.user,\n  )\n  imagePermissions: ImagePermissions[];\n  @OneToMany(\n    () => AlbumPermissions,\n    (albumPermissions) => albumPermissions.album,\n  )\n  albumPermissions: AlbumPermissions[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                getFeed\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFeed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeed(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('feed')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(updateUserDto: UpdateUserDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Delete,\n  UseGuards,\n  Request,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { AuthService } from '../auth/auth.service';\nimport { LocalAuthGuard } from '../auth/guards/local-auth.guard';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\n\n@Controller('user')\nexport class UserController {\n  constructor(\n    private readonly userService: UserService,\n    private authService: AuthService,\n  ) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.userService.findAll();\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('feed')\n  async getFeed(@Request() req) {\n    return this.userService.getFeed(req.user.id);\n  }\n\n  @UseGuards(LocalAuthGuard)\n  @Post('/login')\n  async login(@Body() user: { username: 'string'; password: 'string' }) {\n    return this.authService.login(user);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch()\n  update(@Body() updateUserDto: UpdateUserDto, @Request() req) {\n    return this.userService.update(req.user.id, updateUserDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete()\n  remove(@Request() req) {\n    return this.userService.remove(req.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { AuthModule } from '../auth/auth.module';\n\n@Module({\n  imports: [AuthModule],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getFeed\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFeed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeed(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { getRepository, getConnection } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { ImagePermissions } from '../permissions/entities/image-permissions.entity';\nimport { checkCredentialFields } from './helpers';\n@Injectable()\nexport class UserService {\n  async create(createUserDto: CreateUserDto) {\n    checkCredentialFields(createUserDto);\n\n    if (!createUserDto.mail.includes('@') && createUserDto.mail.length  ({ id, login }));\n  }\n\n  async getFeed(id: number) {\n    const user = await getRepository(User)\n      .createQueryBuilder('user')\n      .where('user.id = :id', { id })\n      .getOne();\n\n    if (!user) throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n\n    const imagePermissions = await getRepository(ImagePermissions)\n      .createQueryBuilder('imagePermissions')\n      .leftJoinAndSelect('imagePermissions.image', 'image')\n      .where('imagePermissions.userId = :userId', { userId: user.id })\n      .getMany();\n\n    return imagePermissions?.map(({ image }) => image);\n  }\n\n  async update(id: number, updateUserDto: UpdateUserDto) {\n    checkCredentialFields(updateUserDto);\n\n    const user = await getRepository(User)\n      .createQueryBuilder('user')\n      .where('user.id = :id', { id })\n      .getOne();\n\n    if (!user) throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n\n    try {\n      await getConnection()\n        .createQueryBuilder()\n        .update(User)\n        .set(updateUserDto)\n        .where('id = :id', { id })\n        .execute();\n    } catch (error) {\n      throw new HttpException(\n        'User has not been updated',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    return `User ${updateUserDto.login} has been updated (id: ${id})`;\n  }\n\n  async remove(id: number) {\n    const user = await getRepository(User)\n      .createQueryBuilder('user')\n      .where('user.id = :id', { id })\n      .getOne();\n    if (!user) throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n\n    try {\n      await getConnection()\n        .createQueryBuilder()\n        .delete()\n        .from(User)\n        .where('id = :id', { id })\n        .execute();\n    } catch (error) {\n      throw new HttpException(\n        'User has not been deleted',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    return `User ${id} has been deleted`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/album/album.controller.ts\n            \n            controller\n            AlbumController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/album/album.service.ts\n            \n            injectable\n            AlbumService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/album/entities/album.entity.ts\n            \n            class\n            Album\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/image/entities/image.entity.ts\n            \n            class\n            Image\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/image/helpers.ts\n            \n            variable\n            getHostImage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/image/helpers.ts\n            \n            variable\n            getImagePermissionsDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/image/helpers.ts\n            \n            variable\n            getMetadata\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/image/helpers.ts\n            \n            variable\n            getPermissionData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/image/helpers.ts\n            \n            variable\n            imageUploadConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/image/helpers.ts\n            \n            variable\n            setFileFilter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/image/helpers.ts\n            \n            variable\n            setFilename\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/image/image.controller.ts\n            \n            controller\n            ImageController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/image/image.service.ts\n            \n            injectable\n            ImageService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mocks/image.ts\n            \n            variable\n            fileMocked\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mocks/image.ts\n            \n            variable\n            imageMocked\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mocks/image.ts\n            \n            variable\n            imagesMocked\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mocks/imagePermissions.ts\n            \n            variable\n            permissionsMocked\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mocks/typeorm.ts\n            \n            variable\n            setTypeormRepoMocked\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mocks/user.ts\n            \n            variable\n            listUsersMocked\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mocks/user.ts\n            \n            variable\n            userMocked\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mocks/user.ts\n            \n            variable\n            usersMocked\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/permissions/entities/album-permissions.entity.ts\n            \n            class\n            AlbumPermissions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/permissions/entities/image-permissions.entity.ts\n            \n            class\n            ImagePermissions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/helpers.ts\n            \n            variable\n            checkCredentialFields\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.6.17\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.6.17\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.17\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            fs : ^0.0.1-security\n        \n            image-size : ^1.0.0\n        \n            moment : ^2.29.1\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.6.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            typeorm : ^0.2.32\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AlbumModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AlbumModule\n\n\n\ncluster_AlbumModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ImageModule\n\n\n\ncluster_ImageModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAlbumService\n\nAlbumService\n\n\n\nAlbumModule\n\nAlbumModule\n\nAlbumModule -->\n\nAlbumService->AlbumModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAlbumModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nImageModule\n\nImageModule\n\nAppModule -->\n\nImageModule->AppModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nImageService\n\nImageService\n\nImageModule -->\n\nImageService->ImageModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            checkCredentialFields   (src/.../helpers.ts)\n                        \n                        \n                            fileMocked   (src/.../image.ts)\n                        \n                        \n                            getHostImage   (src/.../helpers.ts)\n                        \n                        \n                            getImagePermissionsDetails   (src/.../helpers.ts)\n                        \n                        \n                            getMetadata   (src/.../helpers.ts)\n                        \n                        \n                            getPermissionData   (src/.../helpers.ts)\n                        \n                        \n                            imageMocked   (src/.../image.ts)\n                        \n                        \n                            imagesMocked   (src/.../image.ts)\n                        \n                        \n                            imageUploadConfig   (src/.../helpers.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            listUsersMocked   (src/.../user.ts)\n                        \n                        \n                            permissionsMocked   (src/.../imagePermissions.ts)\n                        \n                        \n                            setFileFilter   (src/.../helpers.ts)\n                        \n                        \n                            setFilename   (src/.../helpers.ts)\n                        \n                        \n                            setTypeormRepoMocked   (src/.../typeorm.ts)\n                        \n                        \n                            userMocked   (src/.../user.ts)\n                        \n                        \n                            usersMocked   (src/.../user.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/helpers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            checkCredentialFields\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  userDto: CreateUserDto | UpdateUserDto,\n) => {\n  const loginLength = userDto.login.length;\n  if (loginLength  50)\n    throw new HttpException('Login length is incorrect', HttpStatus.FORBIDDEN);\n\n  const pwdLength = userDto.password.length;\n  if (pwdLength  50)\n    throw new HttpException(\n      'Password length is incorrect',\n      HttpStatus.FORBIDDEN,\n    );\n}\n                        \n                    \n\n\n            \n        \n\n    src/mocks/image.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fileMocked\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Express.Multer.File\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  filename: 'test.png',\n  originalname: 'test.png',\n  fieldname: 'test',\n  encoding: '',\n  mimetype: 'jpeg',\n  size: 30439,\n  stream: null,\n  destination: './test',\n  path: './test',\n  buffer: null,\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageMocked\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  id: 0,\n  name: 'test.png',\n  timestamp: new Date(),\n  metadata: '',\n  userId: 0,\n  imagePermissions: [],\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imagesMocked\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [imageMocked]\n                        \n                    \n\n\n            \n        \n\n    src/image/helpers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getHostImage\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : async (imageId: number, hostId: number) => {\n  const hostImage = await getRepository(Image)\n    .createQueryBuilder('image')\n    .where('image.id = :imageId', { imageId })\n    .andWhere('image.userId = :hostId', { hostId })\n    .getOne();\n\n  if (!hostImage) {\n    throw new HttpException('Your image is not found', HttpStatus.NOT_FOUND);\n  }\n  return hostImage;\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getImagePermissionsDetails\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : async (id: number) => {\n  const imagePermissions = await getRepository(ImagePermissions)\n    .createQueryBuilder('imagePermissions')\n    .innerJoin('imagePermissions.image', 'image')\n    .leftJoinAndSelect('imagePermissions.user', 'user')\n    .where('image.id = :id', { id })\n    .getMany();\n\n  return imagePermissions;\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMetadata\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (file: Express.Multer.File) => {\n  const dimensions = sizeOf(file.path);\n  return JSON.stringify({ ...file, ...dimensions });\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getPermissionData\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : async (imageId: number, userId: number) => {\n  const image = await getRepository(Image)\n    .createQueryBuilder('image')\n    .where('image.id = :id', { id: imageId })\n    .getOne();\n\n  const user = await getRepository(User)\n    .createQueryBuilder('user')\n    .where('user.id = :id', { id: userId })\n    .getOne();\n\n  if (!user || !image)\n    throw new HttpException('Image or user not found', HttpStatus.NOT_FOUND);\n\n  return { user, image };\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageUploadConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  storage: diskStorage({\n    destination: './uploads',\n    filename: setFilename,\n  }),\n  fileFilter: setFileFilter,\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setFileFilter\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  _req: e.Request,\n  file: Express.Multer.File,\n  callback: (error: Error, acceptFile: boolean) => void,\n) => {\n  if (!file.originalname.match(/\\.(jpg|jpeg|png|gif|JPG)$/)) {\n    return callback(\n      new HttpException(\n        'Only image files are allowed!',\n        HttpStatus.BAD_REQUEST,\n      ),\n      false,\n    );\n  }\n\n  callback(null, true);\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setFilename\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  _req: e.Request,\n  file: Express.Multer.File,\n  callback: (error: Error, filename: string) => void,\n) => {\n  const name = file.originalname.split('.')[0];\n  const fileExtName = extname(file.originalname);\n  const randomName = Array(4)\n    .fill(null)\n    .map(() => Math.round(Math.random() * 10).toString(10))\n    .join('');\n  callback(null, `${name}${randomName}${fileExtName}`);\n}\n                        \n                    \n\n\n            \n        \n\n    src/auth/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConstants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  secret: 'ZXBpdGVjaCBpcyA0Mg==',\n}\n                        \n                    \n\n\n            \n        \n\n    src/mocks/user.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            listUsersMocked\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  { id: 1, login: 'test' },\n  { id: 2, login: 'test2' },\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userMocked\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  id: 1,\n  login: 'test',\n  password: 'testtest',\n  mail: 'test@mail.fr',\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            usersMocked\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  { id: 1, login: 'test', password: 'test', mail: 'test@mail.fr' },\n  { id: 2, login: 'test2', password: 'test2', mail: 'test2@mail.fr' },\n]\n                        \n                    \n\n\n            \n        \n\n    src/mocks/imagePermissions.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            permissionsMocked\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    image: imageMocked,\n  },\n]\n                        \n                    \n\n\n            \n        \n\n    src/mocks/typeorm.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            setTypeormRepoMocked\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  getManyMocked: Record[] = undefined,\n  getOneMocked: Record = undefined,\n) =>\n  jest.fn().mockReturnValue({\n    createQueryBuilder: jest.fn().mockReturnValue({\n      getMany: jest.fn().mockReturnValue(getManyMocked),\n      getOne: jest.fn().mockResolvedValue(getOneMocked),\n      where: jest.fn().mockReturnThis(),\n      andWhere: jest.fn().mockReturnThis(),\n      leftJoinAndSelect: jest.fn().mockReturnThis(),\n      insert: jest.fn().mockReturnThis(),\n      into: jest.fn().mockReturnThis(),\n      values: jest.fn().mockReturnThis(),\n      execute: jest.fn().mockReturnThis(),\n      update: jest.fn().mockReturnThis(),\n      set: jest.fn().mockReturnThis(),\n      delete: jest.fn().mockReturnThis(),\n      from: jest.fn().mockReturnThis(),\n    }),\n  })\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
